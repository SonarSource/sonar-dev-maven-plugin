#--------------------------------------------------------
# To use an environment variable, use the following syntax :  ${env:NAME_OF_ENV_VARIABLE}
# For example :
#   sonar.jdbc.url: ${env:SONAR_JDBC_URL}
#
#
# See also the file conf/wrapper.conf for JVM advanced settings
#---------------------------------------------------------


#---------------------------------------------------------
# WEB
#---------------------------------------------------------
# Listen host/port and context path (for example / or /sonar). Default values are 0.0.0.0:9000/
# ONLY IF STANDALONE MODE. NOT USED IF DEPLOYED AS A WAR.
#sonar.web.host:                           0.0.0.0
#sonar.web.port:                           9000
#sonar.web.context:                        /

# Apache mod_jk connector. Supported only in standalone mode.
# Uncomment to activate AJP13 connector.
#sonar.ajp13.port: 8009

#---------------------------------------------------------
# DATABASE
#---------------------------------------------------------

#----- Embedded database
# Comment the following lines to deactivate the default embedded database (used only for tests and demos)
#sonar.jdbc.url:                            jdbc:h2:tcp://localhost:9092/sonar
#sonar.jdbc.driverClassName:                org.h2.Driver
#sonar.jdbc.validationQuery:                values(1)
#sonar.embeddedDatabase.port:               9092
# data directory, autodetected : /data if standalone application, /WEB-INF/classes/data if WAR deployement (exploded mode)
#sonar.embeddedDatabase.dataDir:

#----- Derby
# Comment the embedded database and uncomment the following lines to use Derby
#sonar.jdbc.url:                            jdbc:derby://localhost:1527/sonar;create=true
#sonar.jdbc.driverClassName:                org.apache.derby.jdbc.ClientDriver
#sonar.jdbc.validationQuery:                values(1)
# data directory, autodetected : /data if standalone application, /WEB-INF/classes/data if WAR deployement (exploded mode)
#sonar.embeddedDatabase.dataDir:
# derby embedded database server listening port, defaults to 1527
#sonar.derby.drda.portNumber:               1527

#----- MySQL 5.x/6.x
# Comment the embedded database and uncomment the following lines to use MySQL
#sonar.jdbc.url:                            jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8
#sonar.jdbc.driverClassName:                com.mysql.jdbc.Driver
#sonar.jdbc.validationQuery:                select 1


#----- Oracle 10g/11g
# Comment the embedded database and uncomment the following lines to use Oracle
#sonar.jdbc.url:                            jdbc:oracle:thin:@localhost/XE
#sonar.jdbc.driverClassName:                oracle.jdbc.driver.OracleDriver
#sonar.jdbc.validationQuery:                select 1 from dual

# Activate if more than one Sonar Oracle schemas on the data server (for example different versions installed).
# In that case, use the same property during maven analysis (-Dsonar.hibernate.default_schema=xxx)
#sonar.hibernate.default_schema:            sonar

#----- PostgreSQL 8.x
# uncomment the 3 following lines to use PostgreSQL
#sonar.jdbc.url:                            jdbc:postgresql://localhost/sonar
#sonar.jdbc.driverClassName:                org.postgresql.Driver
#sonar.jdbc.validationQuery:                select 1


#----- Microsoft SQLServer - NOT TESTED and NOT SUPPORTED.
# The Jtds open source driver is available in extensions/jdbc-driver/mssql. More details on http://jtds.sourceforge.
#sonar.jdbc.url:                            jdbc:jtds:sqlserver://localhost;databaseName=SONAR;SelectMethod=Cursor
#sonar.jdbc.driverClassName:                net.sourceforge.jtds.jdbc.Driver
#sonar.jdbc.validationQuery:                select 1


#----- Global database settings
#sonar.jdbc.username:                       sonar
#sonar.jdbc.password:                       sonar
sonar.jdbc.maxActive:                      10
sonar.jdbc.maxIdle:                        5
sonar.jdbc.minIdle:                        2
sonar.jdbc.maxWait:                        5000
sonar.jdbc.minEvictableIdleTimeMillis:     600000
sonar.jdbc.timeBetweenEvictionRunsMillis:  30000

# Transaction isolation level. Default driver setting is used by default.
# Values : 1 (TRANSACTION_READ_UNCOMMITED), 2 (TRANSACTION_READ_COMMITTED), 4 (TRANSACTION_REPEATABLE_READ), 8 (TRANSACTION_SERIALIZABLE)
#sonar.jdbc.defaultTransactionIsolation: 2


# When packaged in a WAR, JDBC datasource can be configured into the application server then registered to JNDI.
# In such a case Sonar uses this datasource to connect to database, else if binds itself its own datasource.
# Note : Jonas does not accept to bind subcontexts, so name should be something like 'jdbc-sonar', without slashes.
#sonar.jdbc.jndiName:                       jdbc/sonar

# If you don't use the default JDBC drivers, as listed above, then you have to explicitly set the dialect to use.
# Values are : mysql, derby, oracle, postgresql
#sonar.jdbc.dialect=


#---------------------------------------------------------
# EXTENSIONS
#---------------------------------------------------------
# Absolute path of coding rules extensions (custom rules that are not provided with tools like Checkstyle or PMD).
# This parameter is useful when Sonar is deployed as a WAR. It avoids from packaging the WAR file each time extensions JARs are updated.
# The directory contains subdirectories like checkstyle/ and pmd/
# Example :
# sonar.rules.extensionsPath:  /user/home/jdoe/sonar/extensions
# Example for windows platform (backslash char must be escaped) :
# sonar.rules.extensionsPath:  D:\\softwares\\sonar-1.8\\extensions
